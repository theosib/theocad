#include "rational_circle.hpp"
#include <iostream>
#include <math.h>

namespace theocad {

const FIII rational_circle[] = 
{{0.000000, 0, 1, 1}, 
{0.373261, 307, 47124, 47125}, 
{0.619408, 185, 17112, 17113}, 
{0.874728, 131, 8580, 8581}, 
{1.112504, 103, 5304, 5305}, 
{1.348074, 85, 3612, 3613}, 
{1.613859, 71, 2520, 2521}, 
{1.818761, 63, 1984, 1985}, 
{2.083253, 55, 1512, 1513}, 
{2.338279, 49, 1200, 1201}, 
{2.546060, 45, 1012, 1013}, 
{2.794362, 41, 840, 841}, 
{3.096315, 37, 684, 685}, 
{3.273154, 35, 612, 613}, 
{3.471409, 33, 544, 545}, 
{3.695220, 31, 480, 481}, 
{3.949868, 29, 420, 421}, 
{4.242193, 27, 364, 365}, 
{4.581220, 25, 312, 313}, 
{4.771888, 48, 575, 577}, 
{4.979106, 23, 264, 265}, 
{5.205124, 44, 483, 485}, 
{5.452622, 21, 220, 221}, 
{5.724811, 40, 399, 401}, 
{6.025575, 19, 180, 181}, 
{6.359660, 36, 323, 325}, 
{6.540976, 140, 1221, 1229}, 
{6.732921, 17, 144, 145}, 
{6.936459, 132, 1085, 1093}, 
{7.152669, 32, 255, 257}, 
{7.382772, 124, 957, 965}, 
{7.628150, 15, 112, 113}, 
{7.890372, 116, 837, 845}, 
{8.171233, 28, 195, 197}, 
{8.472790, 108, 725, 733}, 
{8.797411, 13, 84, 85}, 
{9.027977, 228, 1435, 1453}, 
{9.147842, 100, 621, 629}, 
{9.527284, 24, 143, 145}, 
{9.798185, 105, 608, 617}, 
{9.939482, 92, 525, 533}, 
{10.159216, 360, 2009, 2041}, 
{10.388858, 11, 60, 61}, 
{10.711650, 192, 1015, 1033}, 
{10.880664, 84, 437, 445}, 
{11.198679, 255, 1288, 1313}, 
{11.421186, 20, 99, 101}, 
{11.812283, 87, 416, 425}, 
{12.018012, 76, 357, 365}, 
{12.231008, 168, 775, 793}, 
{12.406896, 460, 2091, 2141}, 
{12.680384, 9, 40, 41}, 
{13.039603, 280, 1209, 1241}, 
{13.163889, 156, 667, 685}, 
{13.419674, 68, 285, 293}, 
{13.685547, 75, 308, 317}, 
{13.905915, 205, 828, 853}, 
{14.250032, 16, 63, 65}, 
{14.611519, 195, 748, 773}, 
{14.862816, 69, 260, 269}, 
{15.047641, 371, 1380, 1429}, 
{15.189287, 60, 221, 229}, 
{15.530332, 132, 475, 493}, 
{15.706627, 232, 825, 857}, 
{15.886944, 516, 1813, 1885}, 
{16.260204, 7, 24, 25}, 
{16.594290, 672, 2255, 2353}, 
{16.853937, 216, 713, 745}, 
{17.061531, 120, 391, 409}, 
{17.231297, 165, 532, 557}, 
{17.492325, 52, 165, 173}, 
{17.683630, 315, 988, 1037}, 
{17.945253, 57, 176, 185}, 
{18.324694, 155, 468, 493}, 
{18.492226, 301, 900, 949}, 
{18.647184, 737, 2184, 2305}, 
{18.924644, 12, 35, 37}, 
{19.275076, 477, 1364, 1445}, 
{19.564814, 145, 408, 433}, 
{19.731613, 184, 513, 545}, 
{20.015959, 51, 140, 149}, 
{20.351021, 273, 736, 785}, 
{20.609694, 44, 117, 125}, 
{20.815422, 441, 1160, 1241}, 
{20.982954, 135, 352, 377}, 
{21.239311, 96, 247, 265}, 
{21.568596, 168, 425, 457}, 
{21.771053, 260, 651, 701}, 
{21.908125, 372, 925, 997}, 
{22.140406, 828, 2035, 2197}, 
{22.619865, 5, 12, 13}, 
{22.867363, 3204, 7597, 8245}, 
{23.120262, 792, 1855, 2017}, 
{23.267267, 476, 1107, 1205}, 
{23.536577, 240, 551, 601}, 
{23.777315, 152, 345, 377}, 
{23.952265, 231, 520, 569}, 
{24.189514, 84, 187, 205}, 
{24.529547, 115, 252, 277}, 
{24.761515, 369, 800, 881}, 
{25.057615, 36, 77, 85}, 
{25.305113, 539, 1140, 1261}, 
{25.448711, 217, 456, 505}, 
{25.750004, 560, 1161, 1289}, 
{25.989233, 39, 80, 89}, 
{26.268045, 420, 851, 949}, 
{26.481039, 136, 273, 305}, 
{26.784996, 105, 208, 233}, 
{26.991467, 300, 589, 661}, 
{27.140869, 203, 396, 445}, 
{27.472536, 495, 952, 1073}, 
{27.630051, 915, 1748, 1973}, 
{28.072487, 8, 15, 17}, 
{28.368589, 2093, 3876, 4405}, 
{28.600555, 663, 1216, 1385}, 
{28.841547, 315, 572, 653}, 
{29.068911, 189, 340, 389}, 
{29.241749, 276, 493, 565}, 
{29.487125, 95, 168, 193}, 
{29.862835, 120, 209, 241}, 
{30.036722, 451, 780, 901}, 
{30.136976, 364, 627, 725}, 
{30.510237, 33, 56, 65}, 
{30.844322, 464, 777, 905}, 
{31.048222, 180, 299, 349}, 
{31.284492, 175, 288, 337}, 
{31.502348, 429, 700, 821}, 
{31.664774, 1273, 2064, 2425}, 
{31.890791, 28, 45, 53}, 
{32.226837, 585, 928, 1097}, 
{32.378414, 279, 440, 521}, 
{32.779079, 85, 132, 157}, 
{33.114143, 407, 624, 745}, 
{33.213963, 969, 1480, 1769}, 
{33.398487, 60, 91, 109}, 
{33.855026, 161, 240, 289}, 
{34.041050, 735, 1088, 1313}, 
{34.205460, 104, 153, 185}, 
{34.482918, 261, 380, 461}, 
{34.708050, 160, 231, 281}, 
{35.051136, 228, 325, 397}, 
{35.300247, 308, 435, 533}, 
{35.489342, 400, 561, 689}, 
{35.637779, 504, 703, 865}, 
{35.938278, 888, 1225, 1513}, 
{36.166889, 1568, 2145, 2657}, 
{36.378090, 3220, 4371, 5429}, 
{36.869896, 3, 4, 5}, 
{37.120644, 12604, 16653, 20885}, 
{37.374702, 3128, 4095, 5153}, 
{37.599770, 1504, 1953, 2465}, 
{37.849289, 840, 1081, 1369}, 
{38.051212, 580, 741, 941}, 
{38.358017, 368, 465, 593}, 
{38.580093, 280, 351, 449}, 
{38.717987, 481, 600, 769}, 
{38.880070, 204, 253, 325}, 
{39.307648, 140, 171, 221}, 
{39.597752, 225, 272, 353}, 
{39.770329, 799, 960, 1249}, 
{39.966213, 88, 105, 137}, 
{40.190464, 615, 728, 953}, 
{40.449718, 133, 156, 205}, 
{40.752869, 455, 528, 697}, 
{41.112091, 48, 55, 73}, 
{41.317822, 1403, 1596, 2125}, 
{41.544510, 319, 360, 481}, 
{41.708916, 336, 377, 505}, 
{42.075024, 65, 72, 97}, 
{42.322521, 744, 817, 1105}, 
{42.501011, 252, 275, 373}, 
{42.741245, 207, 224, 305}, 
{43.002869, 429, 460, 629}, 
{43.142616, 731, 780, 1069}, 
{43.602818, 20, 21, 29}, 
{43.859177, 2387, 2484, 3445}, 
{44.022568, 893, 924, 1285}, 
{44.332691, 297, 304, 425}, 
{44.498047, 396, 403, 565}, 
{44.760269, 119, 120, 169}, 
{44.958870, 696, 697, 985}};

FIII find_rational_angle(float angle) {
    int iangle = llrint(angle * 4) % (360*4);
    if (iangle < 0) iangle += 360*4;
    if (iangle <= 45*4) {
        return rational_circle[iangle];
    } else if (iangle <= 90*4) {
        FIII r = rational_circle[90*4 - iangle];
        r.a = 90 - r.a;
        std::swap(r.b, r.c);
        return r;
    } else if (iangle <= 135*4) {
        FIII r = rational_circle[iangle - 90*4];
        r.a += 90;
        std::swap(r.b, r.c);
        r.c = -r.c; // Change sign of x
        return r;
    } else if (iangle <= 180*4) {
        FIII r = rational_circle[180*4 - iangle];
        r.a = 180 - r.a;
        r.c = -r.c;
        return r;
    } else {
        FIII r = find_rational_angle(angle - 180);
        r.a += 180;
        r.b = -r.b;
        r.c = -r.c;
        return r;
    }
}

}

#if 0
int main()
{
    for (int a=0; a<360; a+=15) {
        theocad::FIII r = theocad::find_angle(a);
        std::cout << r.a << " " << (float(r.c)/float(r.d)) << "," << (float(r.b)/float(r.d)) << " " <<
            cos(a*M_PI/180.0) << "," << sin(a*M_PI/180.0) <<
            std::endl;
    }
}
#endif
